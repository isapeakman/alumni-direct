<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lightcs.mapper.JobApplyRecordMapper">

    <resultMap id="BaseResultMap" type="com.lightcs.model.pojo.JobApplyRecord">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="jobId" column="job_id" jdbcType="INTEGER"/>
            <result property="applicantId" column="applicant_id" jdbcType="INTEGER"/>
            <result property="resume" column="resume" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="applyTime" column="apply_time" jdbcType="TIMESTAMP"/>
    </resultMap>

<!--    <sql id="Base_Column_List">-->
<!--        job_apply_record.id,job_id,applicant_id,-->
<!--        resume,status,apply_time-->
<!--    </sql>-->
    <select id="getJobApplyRecordCards" resultType="com.lightcs.model.vo.JobApplyRecordCardVO">
        SELECT a.id, a.job_id, a.applicant_id, a.resume, a.status, a.apply_time,
        d.name as applicantName ,TIMESTAMPDIFF(YEAR, d.birth, CURDATE()) AS age,d.gender,
        ed.school, ed.major, ed.degree
        FROM job_apply_record a
        left JOIN user_detail d ON a.applicant_id = d.user_id
        left join (
        SELECT user_id, school, major, degree
        FROM education_detail
        WHERE (user_id, degree) IN (
        SELECT user_id, MAX(degree)
        FROM education_detail
        GROUP BY user_id
        )
        ) ed ON ed.user_id = a.applicant_id
        WHERE a.recruiter_id = #{userId}
        <if test="jobId != null">
            AND a.job_id = #{jobId}
        </if>
        <if test="status != null">
            AND a.status = #{status}
        </if>
        ORDER BY a.apply_time DESC
    </select>

    <select id="getJobApplyRecords" resultType="com.lightcs.model.vo.JobApplyRecordVO">
        select id               as job_id,
               title,
               job_type,
               location,
               job_desc,
               min_salary,
               max_salary,
               company_name,
               recruiter_name,
               user.user_avatar as recruiter_avatar,
               job.status,
               publish_time,
               apply_time,
               resume
        from job
                 RIGHT JOIN (select job_id, apply_time, resume
                             from job_apply_record
                             where applicant_id = #{applicantId}) AS jar on jar.job_id = job.id
                 LEFT JOIN user on job.create_id = user.user_id
        order by apply_time desc
    </select>
</mapper>
